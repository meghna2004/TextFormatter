using System;
using TextFormatter.TemplateBuilder;

namespace TextFormatter.TemplateBuilder
{
  /*  [CrmPluginRegistration("Update",
  " ", StageEnum.PostOperation, ExecutionModeEnum.Synchronous, ""
  , "TextFormatter.TemplateBuilder.CustomEmails: Update of Email Template", 1000,
  IsolationModeEnum.Sandbox
  , Image1Type = ImageTypeEnum.PostImage
  , Image1Name = "PostImage"
  , Image1Attributes = ""
  , Description = "TextFormatter.TemplateBuilder.CustomEmails: Update of Email Template"
  , Id = "cfd0588d-3321-4e8f-951d-29813a8678bc"
  )]*/
    public class CustomEmails : PluginBase
    {
        /* This is the main class used to execute the plugin for email creation.
         The email is generated when an option set field on emailcustomtemplate called generateemail is updated to 'Generate'
        The follwowing code uses spkl which is an open source library created by Scott Durrow to simply the deployment of Dynamics 365 solutions by providing a straightforward approach using a JSON configuration file.
        This is a tool used by the organisation to deploy plugins into the system therefore choice of using this was made for this project
        The PluginBase Abstract Class is a class automatically generated by the Plugin-Library Template*/
        protected override void ExecuteCDSPlugin(LocalPluginContext localcontext)
        {            
            localcontext.Trace("CustomEmails: Start of plugin");
            var context = localcontext.PluginExecutionContext;
            localcontext.Trace("CustomEmails: Test 1");
            var service = localcontext.OrganizationService;
            localcontext.Trace("CustomEmails: Test 1.1");          
            vig_emailcustomtemplate emailTempEntity = localcontext.MergedPostTarget.ToEntity<vig_emailcustomtemplate>();        
            string emailHTMLBody = string.Empty;
            localcontext.Trace("CustomEmails: Test 1.2");
            string openingParagraph = emailTempEntity.vig_openingparagraph;
            string closingParagraph = emailTempEntity.vig_closingparagraph;
            string Subject = emailTempEntity.vig_subject;
            Guid descriptionId = emailTempEntity.vig_emaildescriptionid.Id;
            localcontext.Trace("CustomEmails: Test 1.3");
            emailHTMLBody += openingParagraph;
            emailHTMLBody += EmailFormatterFunctions.GenerateDescriptionBody(descriptionId, service, localcontext);
            emailHTMLBody += closingParagraph;
            localcontext.Trace("CustomEmails: Test 1.4" + emailHTMLBody);            
            Email email = new Email()
            {
                Description = emailHTMLBody,
                Subject = Subject               
            };
            service.Create(email);
            localcontext.Trace("CustomEmails: Test 1.5 Email Created!");
        }
    }
}
